# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Mail(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, sender: str=None, receiver: str=None, mail_text: str=None):  # noqa: E501
        """Mail - a model defined in Swagger

        :param id: The id of this Mail.  # noqa: E501
        :type id: int
        :param sender: The sender of this Mail.  # noqa: E501
        :type sender: str
        :param receiver: The receiver of this Mail.  # noqa: E501
        :type receiver: str
        :param mail_text: The mail_text of this Mail.  # noqa: E501
        :type mail_text: str
        """
        self.swagger_types = {
            'id': int,
            'sender': str,
            'receiver': str,
            'mail_text': str
        }

        self.attribute_map = {
            'id': 'id',
            'sender': 'sender',
            'receiver': 'receiver',
            'mail_text': 'mailText'
        }

        self._id = id
        self._sender = sender
        self._receiver = receiver
        self._mail_text = mail_text

    @classmethod
    def from_dict(cls, dikt) -> 'Mail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The mail of this Mail.  # noqa: E501
        :rtype: Mail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Mail.


        :return: The id of this Mail.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Mail.


        :param id: The id of this Mail.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sender(self) -> str:
        """Gets the sender of this Mail.


        :return: The sender of this Mail.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender: str):
        """Sets the sender of this Mail.


        :param sender: The sender of this Mail.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")  # noqa: E501

        self._sender = sender

    @property
    def receiver(self) -> str:
        """Gets the receiver of this Mail.


        :return: The receiver of this Mail.
        :rtype: str
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver: str):
        """Sets the receiver of this Mail.


        :param receiver: The receiver of this Mail.
        :type receiver: str
        """
        if receiver is None:
            raise ValueError("Invalid value for `receiver`, must not be `None`")  # noqa: E501

        self._receiver = receiver

    @property
    def mail_text(self) -> str:
        """Gets the mail_text of this Mail.


        :return: The mail_text of this Mail.
        :rtype: str
        """
        return self._mail_text

    @mail_text.setter
    def mail_text(self, mail_text: str):
        """Sets the mail_text of this Mail.


        :param mail_text: The mail_text of this Mail.
        :type mail_text: str
        """
        if mail_text is None:
            raise ValueError("Invalid value for `mail_text`, must not be `None`")  # noqa: E501

        self._mail_text = mail_text
